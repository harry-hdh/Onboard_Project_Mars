// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Testing_Project_Mars_SpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ServiceListing")]
    public partial class ServiceListingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ServiceListingFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ServiceListing", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("I log into Mars website successfully with email \'bat_man@yahoo.com\' and pass \'123" +
                    "qweasd\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Share new skill with valid data")]
        [NUnit.Framework.CategoryAttribute("ShareSkill")]
        [NUnit.Framework.TestCaseAttribute("My livestream", "my test description!", "8", "5", "fps", "chatting", "01122024", "01012025", "1000pm", "0200am", "1100pm", "0300am", null)]
        public void _01ShareNewSkillWithValidData(string title, string description, string category, string sub_Category, string tags, string skill_Exchange, string startDate, string endDate, string start1, string end1, string start2, string end2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ShareSkill"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("Sub-category", sub_Category);
            argumentsOfScenario.Add("Tags", tags);
            argumentsOfScenario.Add("Skill-Exchange", skill_Exchange);
            argumentsOfScenario.Add("Start date", startDate);
            argumentsOfScenario.Add("End date", endDate);
            argumentsOfScenario.Add("Start1", start1);
            argumentsOfScenario.Add("End1", end1);
            argumentsOfScenario.Add("Start2", start2);
            argumentsOfScenario.Add("End2", end2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01) Share new skill with valid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 9
 testRunner.When("I click Share Skill button to navigate to service listing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then(string.Format("I enter title as \'{0}\', description as \'{1}\', select category as \'{2}\' & sub-cate" +
                            "gory as \'{3}\', tags as \'{4}\', choose service type as One-off service, location t" +
                            "yps as Online & skill exchange as \'{5}\'", title, description, category, sub_Category, tags, skill_Exchange), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And(string.Format("I select available days \'{0}\', \'{1}\', choose available week day Saturday & Sunday" +
                            ", select available time \'{2}\', \'{3}\', \'{4}\', \'{5}\'", startDate, endDate, start1, end1, start2, end2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.Then("I click Save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then(string.Format("My new share skill should be created with \'{0}\' & \'{1}\'", title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Edit service with valid data")]
        [NUnit.Framework.CategoryAttribute("ShareSkill")]
        [NUnit.Framework.TestCaseAttribute("My Logo", "I love logo!", "1", "1", "design", "99", "02122024", "01122025", "0900a", "0300p", "1000a", "0400p", null)]
        public void _02EditServiceWithValidData(string title, string description, string category, string sub_Category, string tags, string credit, string startDate, string endDate, string start1, string end1, string start2, string end2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ShareSkill"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("Sub-category", sub_Category);
            argumentsOfScenario.Add("Tags", tags);
            argumentsOfScenario.Add("Credit", credit);
            argumentsOfScenario.Add("Start date", startDate);
            argumentsOfScenario.Add("End date", endDate);
            argumentsOfScenario.Add("Start1", start1);
            argumentsOfScenario.Add("End1", end1);
            argumentsOfScenario.Add("Start2", start2);
            argumentsOfScenario.Add("End2", end2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02) Edit service with valid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 21
 testRunner.When("I navigate to manage listings tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("I click on edit button of the latest service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then(string.Format("I edit title as \'{0}\', description as \'{1}\', select category as \'{2}\' & sub-categ" +
                            "ory as \'{3}\', tags as \'{4}\',choose  skill trade as credit skill & credit as \'{5}" +
                            "\'", title, description, category, sub_Category, tags, credit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And(string.Format("I select available days \'{0}\', \'{1}\', choose available day Monday & Tusday, selec" +
                            "t available time \'{2}\', \'{3}\', \'{4}\', \'{5}\'", startDate, endDate, start1, end1, start2, end2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.Then("I click Save to update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then(string.Format("Share skill should be edited with \'{0}\' & \'{1}\'", title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03) Delete existing service")]
        [NUnit.Framework.CategoryAttribute("ShareSkill")]
        public void _03DeleteExistingService()
        {
            string[] tagsOfScenario = new string[] {
                    "ShareSkill"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03) Delete existing service", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 34
 testRunner.When("I navigate to manage listings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.Then("I click on delete button and click yes to remove the latest service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.Then("I should be able to delete the service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04) Share new skill with invalid data")]
        [NUnit.Framework.CategoryAttribute("ShareSkill")]
        public void _04ShareNewSkillWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "ShareSkill"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04) Share new skill with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 41
testRunner.When("I click on Share Skill button to navigate to service listing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
testRunner.Then("I try to enter title as \'123!\' and description as \'<>$%\' and leave other fields e" +
                        "mpty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
testRunner.And("I try click Save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
testRunner.Then("my skill should not be shared will warning messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
